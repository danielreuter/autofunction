{"metadata":{"lastUpdated":1719001749667},"data":{"5284f2e56c46318184a202835d1d403cfcce4852ef2cdf1023c5059f07eb1e49":{"do":"make a bunch of random numbers","code":{"id":"49ca5bd1-5afa-4977-a69c-725653be7a23","fn":"function generateRandomNumbers({ utils }) {\n  // Generate a 2D array of random numbers\n  const rows = 5; // Number of rows\n  const cols = 5; // Number of columns\n  const randomNumbers = [];\n\n  for (let i = 0; i < rows; i++) {\n    const row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(Math.random());\n    }\n    randomNumbers.push(row);\n  }\n\n  return Promise.resolve(randomNumbers);\n}"},"iterations":[],"status":"success","timestamp":1719001750447},"50e1fb35d1471fe6fb756f8310cacff9d19984badd2cff8215f0ea4878176612":{"do":"add two numbers","code":{"id":"3f4cd9f5-be0b-4b2c-937c-a954818633bd","fn":"async function addNumbers({ input, utils }) {\n  const { num1, num2 } = input;\n  return num1 + num2;\n}"},"iterations":[],"status":"success","timestamp":1719002001419},"9d5aa529a96a59b13fa28143979a6fbfb32dc10942158fd73df472d621c98d54":{"do":"concatenate two strings","code":{"id":"1c6b1dd9-60c4-4962-a3d3-e8763bef3783","fn":"async function concatenateStrings({ input, utils }) {\n  const { str1, str2 } = input;\n  return str1 + str2;\n}"},"iterations":[],"status":"success","timestamp":1719002005652},"36422353852ef47087906928f65008381bf80d828897667d30f23fe288d5ed70":{"do":"multiply two numbers","code":{"id":"f1700ec8-6882-4d5b-bfde-c78d7f797692","fn":"async function multiplyNumbers({ input, utils }) {\n  const { num1, num2 } = input;\n  return num1 * num2;\n}"},"iterations":[],"status":"success","timestamp":1719002008265},"975bbdb8e69fb52848f39beabfa67fe6caa2cd0e623d5a88b580d42eb221916f":{"do":"reverse a string","code":{"id":"325727c6-d5c3-4de4-b3af-187d21bff65c","fn":"async function fnName({ input, utils }) {\n  const { str } = input;\n  if (typeof str !== 'string') {\n    throw new Error('Input must be a string');\n  }\n  const reversedStr = str.split('').reverse().join('');\n  return reversedStr;\n}"},"iterations":[],"status":"success","timestamp":1719002011899},"6484e99dc2e2e9719028bcc56b3b789a32c1ef70c6f4db750da9703aba8d6301":{"do":"make some random numbers","code":{"id":"af7bc7b2-1f0f-4158-9384-03cab578603b","fn":"async function generateRandomNumbers({ utils }) {\n  const generateRandomNumber = () => Math.floor(Math.random() * 100);\n\n  const randomNumbers = Array.from({ length: 5 }, () => [\n    generateRandomNumber(),\n    generateRandomNumber(),\n  ]);\n\n  return randomNumbers;\n}"},"iterations":[],"status":"success","timestamp":1719003281325},"dfbada8d5e91a238fc81989385ce8184506a314f2390334119d0afb87bcc0c14":{"do":"add two numbers","error":{"name":"RuntimeError","code":"COMPILER_ERROR","cause":{"name":"AI_APICallError","message":"Invalid schema for function 'json': [{'type': 'number'}, {'type': 'number'}] is not of type 'object', 'boolean'.","url":"https://api.openai.com/v1/chat/completions","requestBodyValues":{"model":"gpt-4o","logprobs":false,"temperature":0,"messages":[{"role":"user","content":"            I am writing a function that implements this spec: \n            {\"type\":\"function\",\"takes\":{\"arg0\":{\"type\":\"object\",\"properties\":{\"input\":{\"type\":\"array\",\"minItems\":2,\"maxItems\":2,\"items\":[{\"type\":\"number\"},{\"type\":\"number\"}]},\"utils\":{\"type\":\"object\",\"properties\":{\"generateId\":{\"type\":\"function\",\"takes\":{},\"returns\":{\"type\":\"string\"}}},\"required\":[\"generateId\"],\"additionalProperties\":false}},\"required\":[\"input\",\"utils\"],\"additionalProperties\":false,\"description\":\"`input` will be prevalidated.\"}},\"returns\":{\"type\":\"number\",\"promise\":true},\"description\":\"A function that does the following: add two numbers\",\"$schema\":\"http://json-schema.org/draft-07/schema#\"}\n            Please write three inputs to test its behavior.\n            They should just be run-of-the-mill inputs, nothing\n            adversarial or edge-casey.\n          "}],"tool_choice":{"type":"function","function":{"name":"json"}},"tools":[{"type":"function","function":{"name":"json","description":"Respond with a JSON object.","parameters":{"type":"object","properties":{"testInputs":{"type":"array","items":{"type":"object","properties":{"input":{"type":"array","minItems":2,"maxItems":2,"items":[{"type":"number"},{"type":"number"}]},"description":{"type":"string","description":"A description of the test case"}},"required":["input","description"],"additionalProperties":false}}},"required":["testInputs"],"additionalProperties":false,"$schema":"http://json-schema.org/draft-07/schema#"}}}]},"statusCode":400,"responseHeaders":{"alt-svc":"h3=\":443\"; ma=86400","cf-cache-status":"DYNAMIC","cf-ray":"8976e52af84122a2-SJC","connection":"keep-alive","content-length":"275","content-type":"application/json","date":"Fri, 21 Jun 2024 20:54:41 GMT","openai-organization":"user-xxh3ecba0rcmqc98yasxeklv","openai-processing-ms":"381","openai-version":"2020-10-01","server":"cloudflare","set-cookie":"_cfuvid=b0NNs2q63ed8ygkrhnwApLETXk2Q0SznzK9.XhYBXGI-1719003281705-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None","strict-transport-security":"max-age=31536000; includeSubDomains","x-ratelimit-limit-requests":"10000","x-ratelimit-limit-tokens":"800000","x-ratelimit-remaining-requests":"9999","x-ratelimit-remaining-tokens":"799770","x-ratelimit-reset-requests":"6ms","x-ratelimit-reset-tokens":"17ms","x-request-id":"62a184357a72c6eb8e9d23a1452d7775"},"responseBody":"{\n  \"error\": {\n    \"message\": \"Invalid schema for function 'json': [{'type': 'number'}, {'type': 'number'}] is not of type 'object', 'boolean'.\",\n    \"type\": \"invalid_request_error\",\n    \"param\": \"tools[0].function.parameters\",\n    \"code\": \"invalid_function_parameters\"\n  }\n}","isRetryable":false,"data":{"error":{"message":"Invalid schema for function 'json': [{'type': 'number'}, {'type': 'number'}] is not of type 'object', 'boolean'.","type":"invalid_request_error","param":"tools[0].function.parameters","code":"invalid_function_parameters"}}}},"iterations":[],"status":"failure","timestamp":1719003281953},"24496c196c075b0779efad7282d16e0ce38d91fb3b8902793f5bba5f5691a414":{"do":"add some numbers","code":{"id":"2c463ee2-6c5b-4ab7-9d5d-59a7b6bc3f15","fn":"async function fnName({ input, utils }) {\n  // Sum all the numbers in the input array\n  const sum = input.reduce((acc, num) => acc + num, 0);\n  \n  // Return the sum\n  return sum;\n}"},"iterations":[],"status":"success","timestamp":1719003420005},"9c218358922b733dc220dd7bb36764ffcb538166749d63251ae8217ef0638571":{"do":"concatenate strings","code":{"id":"0f0007ee-831e-4ecd-9cc7-bd79a18a7730","fn":"async function concatenateStrings({ input, utils }) {\n  // Concatenate all strings in the input array\n  const concatenatedString = input.join('');\n  \n  // Return the concatenated string\n  return concatenatedString;\n}"},"iterations":[],"status":"success","timestamp":1719003422374},"57ec9ae6dd0cda1df6f4212e070e62aff4ae137a23fb53601b1b6f49e396dd0e":{"do":"multiply two numbers","code":{"id":"c3c22a94-18f4-432c-82a7-1870e7c80e64","fn":"async function multiplyNumbers({ input, utils }) {\n  const { a, b } = input;\n  return a * b;\n}"},"iterations":[],"status":"success","timestamp":1719003424723},"175f9ece6d77e06202651910f5bdd7dd3046e1c878431140bd0c21addb88d2f4":{"do":"reverse a string","code":{"id":"ce649457-2431-4959-bc38-048f71167a06","fn":"async function reverseString({ input, utils }) {\n  // Reverse the input string\n  const reversedString = input.split('').reverse().join('');\n  return reversedString;\n}"},"iterations":[],"status":"success","timestamp":1719003429492},"abcfb3ec94ddda0797124e3b4dbeaf02ac462dfa2074a02add2aae1f244d43c6":{"do":"concatenate strings with a space between them","code":{"id":"432cee35-34b5-4bd3-8b70-244741a81eb3","fn":"async function concatenateStrings({ input, utils }) {\n  // Concatenate the strings with a space between them\n  const concatenatedString = input.join(' ');\n  return concatenatedString;\n}"},"iterations":[],"status":"success","timestamp":1719003488098},"27833e3d6b42ff71e24cf25b7074021f9a65b0bc73fadd324156c150a180c473":{"do":"concatenate strings with a slash between them","code":{"id":"46a87b4c-cf68-4d88-bc75-45c3c4775398","fn":"async function concatenateStrings({ input, utils }) {\n  // Concatenate the strings with a slash between them\n  const concatenatedString = input.join('/');\n  \n  // Return the concatenated string\n  return concatenatedString;\n}"},"iterations":[],"status":"success","timestamp":1719003542748}}}